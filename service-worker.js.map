{"version":3,"sources":["service-worker.js"],"names":["self","__WB_MANIFEST","appFiles","addEventListener","installing","console","log","waitUntil","caches","open","then","cache","addAll","catch","error","activating","fetching","respondWith","match","request","response","fetch"],"mappings":"YAEqB,moBAAK,cAD1B,IAKM,EAAW,CACf,gBACA,KACA,cACA,cACA,cACA,YACA,gBAIF,KAAK,iBAAiB,WAAW,SAAC,GAChC,QAAQ,IAAI,sDAEZ,EAAW,UACT,OAAO,KAjBO,iBAiBS,MAAK,SAAC,GAE3B,OADA,QAAQ,IAAI,mDACL,EAAM,OAAO,GAAU,OAAM,SAAA,GAClC,QAAQ,MAAM,yBAA0B,EAC1C,GACF,IAEJ,IAEA,KAAK,iBAAiB,YAAY,SAAC,GACjC,QAAQ,IAAI,mDACd,IAEA,KAAK,iBAAiB,SAAS,SAAC,GAC9B,QAAQ,IAAI,0DACZ,EAAS,YACL,OAAO,MAAM,EAAS,SAAS,MAAK,SAAC,GACnC,OAAO,GAAY,MAAM,EAAS,SAAS,OAAM,WAC/C,OAAO,OAAO,MAtCJ,eAuCZ,GACF,IAEN","file":"service-worker.js","sourceRoot":"","sourcesContent":["/* eslint-disable no-restricted-globals */\r\nconst offlinePage = 'offline.html';\r\nconst selfManifest = self.__WB_MANIFEST;\r\nlet pushdata;\r\nconst cacheName = \"broadwayCache\";\r\n//Just take into account that the \"files\" below are request-url's and not filenames perse. So for your root of your website yous should include \"./\" and if you use my site (or another plain HTML-site) also \"index.html\". If you use a server-side language and have friendly url's that could be something like \"news/this-is-a-newsarticle/\".\r\nconst appFiles = [\r\n  \"manifest.json\",\r\n  \"./\",\r\n  \"logo192.png\",\r\n  \"logo512.png\",\r\n  \"favicon.ico\",\r\n  \"logo2.png\",\r\n  \"offline.html\"\r\n];\r\n\r\n\r\nself.addEventListener(\"install\", (installing) => {\r\n  console.log(\"Service Worker: I am being installed, hello world!\");\r\n  //Put important offline files in cache on installation of the service worker\r\n  installing.waitUntil(\r\n    caches.open(cacheName).then((cache) => {\r\n      console.log(\"Service Worker: Caching important offline files\");\r\n      return cache.addAll(appFiles).catch(error => {\r\n        console.error('Failed to cache files:', error);\r\n      });\r\n    })\r\n  );\r\n});\r\n\r\nself.addEventListener(\"activate\", (activating) => {\r\n  console.log(\"Service Worker: All systems online, ready to go!\");\r\n});\r\n\r\nself.addEventListener(\"fetch\", (fetching) => {\r\n  console.log(\"Service Worker: User threw a ball, I need to fetch it!\");\r\n  fetching.respondWith(\r\n      caches.match(fetching.request).then((response) => {\r\n        return response || fetch(fetching.request).catch(() => {\r\n          return caches.match(offlinePage);\r\n        });\r\n      })\r\n  );\r\n});\r\n\r\n// self.addEventListener(\"push\", (pushing) => {\r\n//   console.log(\"Service Worker: I received some push data, but because I am still very simple I don't know what to do with it :(\");\r\n//   if (pushing.data) {\r\n//     pushdata = JSON.parse(pushing.data.text());\r\n//     console.log(\"Service Worker: I received this:\", pushdata);\r\n//     if ((pushdata[\"title\"] != \"\") && (pushdata[\"message\"] != \"\")) {\r\n//       const options = { body: pushdata[\"message\"] }\r\n//       self.registration.showNotification(pushdata[\"title\"], options);\r\n//       console.log(\"Service Worker: I made a notification for the user\");\r\n//     } else {\r\n//       console.log(\"Service Worker: I didn't make a notification for the user, not all the info was there :(\");\r\n//     }\r\n//   }\r\n// })"]}